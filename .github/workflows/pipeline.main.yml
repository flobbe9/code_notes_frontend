name: code_notes_frontend main


run-name: ${{ github.event.head_commit.message }}
on: 
  push: 
    branches: 
      - dev


jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository 
  #       uses: actions/checkout@v4
  #     - run: npm i
  #     - run: npm run build

  push_to_DockerHub:
    runs-on: ubuntu-latest
    # needs: build

    steps:
      - name: Checkout repository 
        uses: actions/checkout@v4

      - run: printf "\nREACT_APP_CRYPTO_KEY=1234567812345678" >> .env;
      - run: printf "\nREACT_APP_CRYPTO_IV=1234567812345678" >> .env;
      - run: cat .env
  
      - name: move .env vars to pipeline
        run: |
          echo $(cat .env | grep '^REACT_APP_VERSION=.*$') >> $GITHUB_ENV
          echo $(cat .env | grep '^PORT=.*$') >> $GITHUB_ENV
          echo $(cat .env | grep '^NODE_VERSION=.*$') >> $GITHUB_ENV
          echo $(cat .env | grep '^SSL_DIR=.*$') >> $GITHUB_ENV
          echo $(cat .env | grep '^SSL_CRT_FILE_NAME=.*$') >> $GITHUB_ENV
          echo $(cat .env | grep '^SSL_KEY_FILE_NAME=.*$') >> $GITHUB_ENV
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v6.10.0
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/code_notes_frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/code_notes_frontend:${{env.REACT_APP_VERSION}}
          build-args: |
            NODE_VERSION=${{env.NODE_VERSION}}
            PORT=${{env.PORT}}
            HTTPS=false
            SSL_DIR=${{env.SSL_DIR}}
            SSL_CRT_FILE_NAME=${{env.SSL_CRT_FILE_NAME}}
            SSL_KEY_FILE_NAME=${{env.SSL_KEY_FILE_NAME}}

  # deploy_to_server:
  #   runs-on: ubuntu-latest
  #   needs: push_to_DockerHub

  #   steps:
  #     - uses: appleboy/ssh-action@v1.2.0
  #       with: 
  #         host: ${{ vars.SSH_HOST }}
  #         username: ${{ secrets.SSH_USER }}
  #         password: ${{ secrets.SSH_PASSWORD }}
  #         debug: true
  #         script: |
  #           chmod 777 ./${{ vars.SSH_TARGET_FOLDER }}/writeToEnvFile.sh
  #           ./${{ vars.SSH_TARGET_FOLDER }}/writeToEnvFile.sh \
  #             FRONTEND_REACT_APP_CRYPTO_KEY='${{ secrets.REACT_APP_CRYPTO_KEY }}' \
  #             FRONTEND_REACT_APP_CRYPTO_IV='${{ secrets.REACT_APP_CRYPTO_IV }}' \
  #             FRONTEND_SSL_KEY_FILE_PASSWORD='${{ secrets.SSL_KEY_FILE_PASSWORD }}'

  #           docker compose -f './${{ vars.SSH_TARGET_FOLDER }}/docker-compose.yml' pull frontend
  #           yes | docker rm $(docker container ls --all --filter=ancestor=$(docker images -f "dangling=true" -q) --format "{{.ID}}") --force
  #           yes | docker image rm $(docker images -f "dangling=true" -q)
  #           docker compose -f './${{ vars.SSH_TARGET_FOLDER }}/docker-compose.yml' up frontend -d
  #           yes | docker volume prune