.rotating {
    -webkit-animation: rotating 2s linear infinite;
    -moz-animation: rotating 2s linear infinite;
    -ms-animation: rotating 2s linear infinite;
    -o-animation: rotating 2s linear infinite;
    animation: rotating 2s linear infinite;
}

.dontSelectText {
    @include dontSelectText()
}

.dontMarkPlaceholder {
    @include placeholder {
        @include dontSelectText();
    }
}

.disabledButton {
    box-shadow: none;
    cursor: default;
    opacity: 0.5 !important;
}

/* Flex */
.flex {
    display: flex;
}

.flexCenter {
    @include flexCenter();
}

.flexCenterStart {
    align-items: flex-start;
    display: flex;
    justify-content: center;
}

.flexCenterEnd {
    align-items: flex-end;
    display: flex;
    justify-content: center;
}

.flexLeft {
    align-items: center;
    display: flex;
    justify-content: left;
}

.flexLeftStart {
    align-items: flex-start;
    display: flex;
    justify-content: left;
}

.flexLeftEnd {
    align-items: flex-end;
    display: flex;
    justify-content: left;
}

.flexRight {
    align-items: center;
    display: flex;
    justify-content: right;
}

.flexRightStart {
    align-items: flex-start;
    display: flex;
    justify-content: right;
}

.flexRightEnd {
    align-items: flex-end;
    display: flex;
    justify-content: right;
}

.flex1 {
    flex: 1;
}

/* Text */
.textCenter {
    text-align: center;
}

.textLeft {
    text-align: left;
}

.textRight {
    text-align: right;
}

/* Link */

.link {
    text-decoration: none;

    &:hover {
        cursor: pointer;
        text-decoration: underline;
    }
}

.simpleLink {
    color: currentColor;
    text-decoration: none;

    @include customHover {
        cursor: pointer;
        text-decoration: none;
    }
}

.whiteLink {
    color: white;
    text-decoration: none;
    
    &:hover {
        cursor: pointer;
    }
}

.blackLink {
    color: black;
    text-decoration: none;
    
    &:hover {
        cursor: pointer;
    }
}

.blueLink {
    color: blue;
    cursor: pointer;
    text-decoration: none;
    transition: color var(--transitionTime);

    &:hover {
        color: rgb(142, 142, 255);
    }
}

.dontBreakText {
    white-space: nowrap;
}

.hidden {
    display: none;
}

.hover {
    @include hover();
}

.hoverStrong {
    @include hoverCursor();

    transition: opacity var(--transitionTime);

    &:hover {
        opacity: 0.5;
    }
}

.buttonFocus {
    @include buttonFocus();
}

.boxShadowLight {
    box-shadow: 0px 3px 5px 0px rgb(180, 180, 180);
}

.boxShadowGrey {
    box-shadow: 1px 3px 3px 0px rgb(151, 151, 151);
}

.boxShadowDark {
    box-shadow: 0px 3px 5px 0px rgb(90, 90, 90);
}

.minorMarginTopOne {
    margin-top: 1px;
}

.dontSelectText {
    -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
    -khtml-user-select: none; /* Konqueror HTML */
    -moz-user-select: none; /* Old versions of Firefox */
    -ms-user-select: none; /* Internet Explorer/Edge */
    user-select: none; /* Non-prefixed version, currently supported by Chrome, Edge, Opera and Firefox */
}

.rotating {
    -webkit-animation: rotating 2s linear infinite;
    -moz-animation: rotating 2s linear infinite;
    -ms-animation: rotating 2s linear infinite;
    -o-animation: rotating 2s linear infinite;
    animation: rotating 2s linear infinite;
}

.invertColor {
    filter: invert(1);
}

.transition {
    transition: var(--transitionTime);
}

.disabled {
    @include disabled();
}

.fullWidth {
    width: 100%;
}

.fullViewWidth {
    /* not doing 100 because the browser's scrollbar would not be considered */
    width: 98vw;
}

.fullHeight {
    height: 100%;
}

.fullViewHeight {
    height: 100vh;
}

@keyframes rotating {
    from {transform: rotate(0deg)}
    to {transform: rotate(360deg)} 
}

@keyframes fadeIn {
    from {
        display: block;
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}