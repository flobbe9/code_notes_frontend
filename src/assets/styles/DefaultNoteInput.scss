@import "./global/functions.scss";

:root {
    --noteInputPaddingX: 4px;
}

.DefaultNoteInput {
    $noteInputDefaultBorderWidth: 2px;
    $noteInputDefaultBorder: $noteInputDefaultBorderWidth solid;
    $noteInputHoverBorderWidthIncrease: 3px;

    border-left: $noteInputDefaultBorder transparent;
    margin: 5px 0;
    position: relative;

    // PlainTextNoteInput
    &:has(.PlainTextNoteInput) {
        .ContentEditableDiv {
            border-left: $noteInputDefaultBorder var(--plainTextNoteInputColor);
            border-right: $noteInputDefaultBorder var(--plainTextNoteInputColor);
        }
    }
    &:has(.PlainTextNoteInput:not(.fullScreen)) {
        .ContentEditableDiv {
            transition: background-color var(--transitionTime);

            @include customHover {
                &:not(:focus) {
                    background-color: var(--matteBlackLight2);
                }
            }
            @include customFocus {
                background-color: var(--matteBlackLight);
            }
        }
    }
    
    // CodeNoteInputWithVariables
    &:has(.CodeNoteInputWithVariables) {
        .ContentEditableDiv {
            border-left: $noteInputDefaultBorder var(--codeNoteInputWithVariablesColor) !important;
            border-right: $noteInputDefaultBorder var(--codeNoteInputWithVariablesColor);
        }
    }
    &:has(.CodeNoteInputWithVariables:not(.fullScreen)) {
        .ContentEditableDiv {
            transition: background-color var(--transitionTime);

            @include customHover {
                &:not(:focus) {
                    background-color: var(--matteBlackLight2);
                }
            }
            @include customFocus {
                background-color: var(--matteBlackLight);
            }
        }
    }
    
    // CodeNoteInput
    &:has(.CodeNoteInput) {
        .overflow-guard {
            border-left: $noteInputDefaultBorder var(--codeNoteInputColor);
            border-right: $noteInputDefaultBorder var(--codeNoteInputColor);
        }
    }
    &:has(.CodeNoteInput:not(.fullScreen)) {
        // not focused, not disabled, hover
        &:has(textarea:not(:focus)) {
            &:has(.overflow-guard:not([disabled]):hover) {
                .overflow-guard, .view-lines { 
                    background-color: var(--matteBlackLight2);
                }
            }
        }
        &:has(textarea:not([disabled]):focus) {
            .overflow-guard, .view-lines {
                background-color: var(--matteBlackLight);
            }
        }
    }
    &:has(textarea:not([disabled])) {
        .overflow-guard {
            .view-lines {
                padding-left: calc(var(--noteInputPaddingX) - $noteInputHoverBorderWidthIncrease) !important;
            }
        }
    }

    &-content {
        border-radius: var(--borderRadius);

        .defaultNoteInputButton {
            background-color: var(--matteBlack);
            color: var(--codeGrey);
            margin: .3em .7rem 0;
            padding: 0 .2em;
            transition: var(--transitionTime);

            @include customHover {
                color: white;
            }
        }

        .deleteNoteInputButton {
            height: unset;
        }

        .copyButton {
            .buttonContentContainer {
                min-width: 15px;
                
                .fa-copy {
                    position: absolute;
                }
            }
        }
    }

    pre {
        position: relative;
    }

    .noteInputOverlay {
        .overlayBackground {
            border-radius: var(--borderRadius);
        }

        .overlayChildrenContainer {
            @include flexCenter();

            .fa-circle-notch {
                color: white;
                font-size: 1.1em;
            }
        }
    }
}